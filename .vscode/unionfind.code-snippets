{
	// Place your atcoder workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"fetchPost":{
		"prefix":"unionfind",
		"body":[
			"struct UnionFind {",
			"\tvector<int> par, siz;",
			"\tUnionFind(int n) : par(n, -1), siz(n, 1) { };",
			"",
			"\tint root(int x) {",
			"\t\tif (par[x] == -1) return x;",
			"\t\telse return par[x] = root(par[x]);",
			"\t}",
			"",
			"\tbool issame(int x, int y) {",
			"\t\treturn root(x) == root(y);",
			"\t}",
			"",
			"\tbool unite(int x, int y) {",
			"\t\tx = root(x); y = root(y);",
			"\t\tif (x == y) return false;",
			"\t\tif (siz[x] < siz[y]) swap(x, y);",
			"\t\tpar[y] = x;",
			"\t\tsiz[x] += siz[y];",
			"\t\treturn true;",
			"\t}",
			"",
			"\tint size(int x) {",
			"\t\treturn siz[root(x)];",
			"\t}",
			"};"
			],
	"description": "unionfind"
	}
}